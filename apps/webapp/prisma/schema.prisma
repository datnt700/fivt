generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  isBanned      Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  timezone      String?
  accounts      Account[]
  Authenticator Authenticator[]
  sessions      Session[]
  categories    Category[]
  transactions  Transaction[]
  bridgeUser     BridgeUser?
  bridgeAccounts BridgeAccount[]
  powensUser     PowensUser?
  powensAccounts PowensAccount[]
  subscriptions UserSubscription[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Category {
  id           String        @id @default(uuid())
  name         String
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Transaction {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  type        TransactionType
  amount      Decimal         @db.Decimal(10, 2)
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum TransactionType {
  INCOME
  EXPENSE
}

model BridgeUser {
  id             String   @id @default(uuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bridgeUuid     String   @unique // Bridge user UUID
  externalUserId String?  // Our user ID as stored in Bridge
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@map("bridge_users")
}

model BridgeAccount {
  id               String   @id @default(uuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bridgeAccountId  String   @unique // Bridge account ID
  itemId           String   // Bridge item ID
  name             String   // Account name from Bridge
  type             String   // Account type (checking, savings, etc.)
  balance          Float?   // Account balance
  currencyCode     String?  // Currency code (EUR, USD, etc.)
  providerId       Int?     // Bridge provider ID
  dataAccess       String   @default("enabled") // enabled/disabled
  lastRefreshStatus String? // successful/failed
  pro              Boolean  @default(false) // Business account flag
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("bridge_accounts")
}

model PowensUser {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  powensId  Int      @unique // Powens user ID
  email     String   // Email used with Powens
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("powens_users")
}

model PowensAccount {
  id               String   @id @default(uuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  powensAccountId  Int      @unique // Powens account ID
  name             String   // Account name from Powens
  type             String   // Account type (checking, savings, etc.)
  balance          Float?   // Account balance
  currency         String?  // Currency code (EUR, USD, etc.)
  accountNumber    String?  // Account number if available
  iban             String?  // IBAN if available
  bic              String?  // BIC if available
  bankName         String   // Name of the bank
  bankCountryCode  String   // Bank country code
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("powens_accounts")
}

// Subscription system models
enum ServiceType {
  DASHBOARD
  BUDGET_TRACKING
  TRANSACTION_MANAGEMENT
  BANKING_INTEGRATION
  AI_CHATBOT
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

model Service {
  id              String             @id @default(uuid())
  name            String
  description     String?
  type            ServiceType
  price           Decimal            @db.Decimal(10, 2)
  isActive        Boolean            @default(true)
  features        String[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  subscriptions   UserSubscription[]
  planIds         String[]           // Service can be part of multiple plans
}

model UserSubscription {
  id        String             @id @default(uuid())
  userId    String
  serviceId String
  status    SubscriptionStatus @default(PENDING)
  startDate DateTime           @default(now())
  endDate   DateTime?
  autoRenew Boolean            @default(true)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, serviceId])
}

model SubscriptionPlan {
  id              String   @id @default(uuid())
  name            String
  description     String?
  price           Decimal  @db.Decimal(10, 2)
  billingInterval String   @default("MONTHLY") // MONTHLY, YEARLY
  serviceIds      String[] // Array of service IDs included in this plan
  isActive        Boolean  @default(true)
  maxUsers        Int?     @default(1)
  features        String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
