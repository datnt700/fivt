import OpenAI from "openai";
import { NextResponse } from 'next/server';
import { RecipeFinancialJsonSchema } from "@/lib/recipeFinancialSchema";
const modelName = "gpt-5-nano";

const client = new OpenAI();

const casualKeywords = ["hi", "hello", "hey", "bonjour", "salut", "xin ch√†o", "ch√†o", "c·∫£m ∆°n", "thanks"];
const financialKeywords = ["budget", "save", "saving", "invest", "money", "debt", "loan", "finance",
  "√©pargne", "investissement", "dette", "argent", "ng√¢n s√°ch", "ti·∫øt ki·ªám", "ƒë·∫ßu t∆∞", "n·ª£"];

function detectIntentRuleBased(prompt: string): "casual" | "financial" | "unsupported" {
  const text = prompt.trim().toLowerCase();

  // 1. Nh·∫≠n di·ªán ch√†o h·ªèi casual
  if (/^(hi|hello|hey|bonjour|salut|xin ch√†o|ch√†o|c·∫£m ∆°n|thanks?)/i.test(text)) {
    return "casual";
  }

  if (
    /(budget|save|saving|invest|money|debt|loan|finance|√©pargne|investissement|dette|argent|ng√¢n s√°ch|ti·∫øt ki·ªám|ƒë·∫ßu t∆∞|n·ª£)/i.test(
      text
    )
  ) {
    return "financial";
  }

  return "unsupported";
}



export async function POST(req: Request) {
  try {
    const { prompt, locale } = await req.json();


    // Language-specific instructions for GPT
    const languageInstructions = {
      en: "You are a helpful financial advisor assistant. Please respond only in English. Provide clear, actionable financial advice with structured strategies and steps.",
      vi: "B·∫°n l√† m·ªôt tr·ª£ l√Ω t∆∞ v·∫•n t√†i ch√≠nh h·ªØu √≠ch. Vui l√≤ng ch·ªâ tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát. Cung c·∫•p l·ªùi khuy√™n t√†i ch√≠nh r√µ r√†ng, c√≥ th·ªÉ th·ª±c hi·ªán v·ªõi c√°c chi·∫øn l∆∞·ª£c v√† b∆∞·ªõc th·ª±c hi·ªán c√≥ c·∫•u tr√∫c.",
      fr: "Vous √™tes un assistant conseiller financier utile. Veuillez r√©pondre uniquement en fran√ßais. Fournissez des conseils financiers clairs et exploitables avec des strat√©gies et des √©tapes structur√©es."
    };

    const languageInstruction = languageInstructions[locale as keyof typeof languageInstructions] 
      || languageInstructions.en;

    const intent = detectIntentRuleBased(prompt);
    if (intent === "casual") {
      return NextResponse.json({
        type: "casual",
        content:
          locale === "fr"
            ? "Bonjour üëã Comment puis-je vous aider ?"
            : locale === "vi"
              ? "Xin ch√†o üëã T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?"
              : "Hello üëã How can I help you today?",
      });
    }

    if (intent === "unsupported") {
      return NextResponse.json({
        type: "unsupported",
        content:
          locale === "fr"
            ? "D√©sol√©, je ne peux r√©pondre qu'aux questions financi√®res."
            : locale === "vi"
              ? "Xin l·ªói, t√¥i ch·ªâ h·ªó tr·ª£ c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn t√†i ch√≠nh."
              : "Sorry, I can only answer finance-related questions.",
      });
    }

    const systemMessage = `${languageInstruction} 

You are a financial advisor AI assistant. Your role is to provide comprehensive financial advice including strategies, actionable steps, and helpful tips. Always respond in the specified language: ${locale === 'vi' ? 'Vietnamese' : locale === 'fr' ? 'French' : 'English'}.

Structure your response to include:
- A clear title for the financial advice
- A brief description of the context
- Specific strategies with detailed explanations
- Step-by-step actionable instructions
- Additional helpful tips

Always ensure your advice is practical, ethical, and appropriate for general financial planning.`;

    const response = await client.chat.completions.create({
      model: modelName,
      messages: [
        {
          role: "system",
          content: systemMessage,
        },
        {
          role: "user",
          content: prompt,
        },
      ],
      response_format: {
        type: "json_schema",
        json_schema: {
          name: "recipeSchema",
          schema: RecipeFinancialJsonSchema,
        },
      },
      stream: true,
    });

    const stream = new ReadableStream({
      async start(controller) {
        for await (const chunk of response) {
          const content = chunk.choices[0]?.delta?.content || "";
          controller.enqueue(new TextEncoder().encode(content));
        }
        controller.close();
      },
    });

    return new NextResponse(stream, {
      headers: {
        "Content-Type": "text/plain",
        "Transfer-Encoding": "chunked",
      },
    });
  } catch (err) {
    console.error("Erreur API:", err);
    return NextResponse.json({ error: err }, { status: 500 });
  }
}
